{"version":3,"sources":["components/orderDetails.js","components/orders.js","components/homepage.js","App.js","serviceWorker.js","index.js"],"names":["OrderDetails","props","state","email","phone","first_name","last_name","address","contact_phone","contact_name","onChange","bind","onSubmit","handleClick","e","this","setState","target","name","value","preventDefault","postData","fetch","match","params","order_id","method","headers","body","JSON","stringify","then","res","console","log","catch","err","toast","success","position","POSITION","BOTTOM_LEFT","to","className","href","item","htmlFor","type","required","onClick","Component","Orders","orderData","json","data","map","orders","index","key","push","order_number","total_price","line_items","product","title","customer","shipping_address","address1","address2","created_at","split","process","_id","homepage","App","basename","exact","path","component","orderDetails","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f1167d13.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { toast } from 'react-toastify'\nimport './orderDetails.css'\nimport { Redirect } from 'react-router-dom'\n\nclass OrderDetails extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             email : '',\n             phone: '',\n             first_name: '',\n             last_name: '',\n             address: '',\n             contact_phone: '',\n             contact_name: ''\n        }\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    \n\n    onChange(e) {\n        this.setState({\n            [e.target.name] : e.target.value\n        });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        \n        const postData = {\n            email: this.state.email,\n            phone: this.state.phone,\n            first_name: this.state.first_name,\n            last_name: this.state.last_name,\n            address: this.state.address,\n            contact_name: this.state.contact_name,\n            contact_phone: this.state.contact_phone,\n        }\n        fetch(`https://mystore-nodebackend.herokuapp.com/orders/${this.props.match.params.order_id}`,{\n            method: 'PUT',\n            headers : {\n                \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(postData)\n        })\n        .then(res => console.log(res))\n        .catch(err => console.log(err))\n    }\n    \n    handleClick(){\n        return(\n            toast.success(\"Details Updated\", {\n                position: toast.POSITION.BOTTOM_LEFT\n            }),\n            <Redirect to=\"/orders/\" />\n        )\n    }\n\n    render() {\n\n        //Destructuring the state\n        const { email, phone, first_name,last_name, contact_name, contact_phone, address }  = this.state\n\n        return (\n            <div>\n                {/* Navbar */}\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                    <div className=\"container\">\n                        <a className=\"navbar-brand\" href=\"/\">Shopify App</a>\n                    </div>\n                </nav>\n                {console.log(\"items\", this.props.item)}\n                &nbsp; &nbsp; &nbsp;\n                <div className=\"container\">\n                    <div className=\"layout_item\">\n                        <form onSubmit={this.onSubmit} >\n                            {/* Contact Information */}\n                            <h3>Contact Information</h3> <br />\n                            <div className=\"row\">\n                                <div className=\"col-sm-4\">\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"first_name\">First Name</label>\n                                        <input type=\"text\"className=\"form-control\" name=\"first_name\" onChange={this.onChange} value={first_name} required />\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"last_name\">Last Name</label>\n                                        <input type=\"text\" className=\"form-control\" name=\"last_name\" onChange={this.onChange} value={last_name} required />\n                                    </div>\n                                </div>\n\n                                <div className=\"col-sm-4\">\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"email\">Email address</label>\n                                        <input type=\"email\"className=\"form-control\" name=\"email\" onChange={this.onChange} value={email} required />\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"phone\">Phone</label>\n                                        <input type=\"number\" className=\"form-control\" name=\"phone\" onChange={this.onChange} value={phone} required />\n                                    </div>\n                                </div>\n                            </div> <br /><br />\n\n                            {/* Shipping Address */}\n                            <h3>Shipping Address</h3> <br />\n                            <div className=\"row\">\n                                <div className=\"col-sm-4\">\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"contact_name\">Contact Person Name</label>\n                                        <input type=\"text\" className=\"form-control\" name=\"contact_name\" onChange={this.onChange} value={contact_name} required />\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"contact_phone\">Contact Person Number</label>\n                                        <input type=\"number\" className=\"form-control\" name=\"contact_phone\" onChange={this.onChange} value={contact_phone} required />\n                                    </div>\n                                </div>\n\n                                <div className=\"col-sm-4\">\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"address\">Address</label>\n                                        <textarea className=\"form-control\" name=\"address\" onChange={this.onChange} value={address} required></textarea>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <button type=\"submit\" className=\"btn-primary btn-sm\" onClick={this.handleClick}>Save</button>\n                        </form>\n                        &nbsp; &nbsp; &nbsp;\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default OrderDetails\n","import React, { Component } from 'react'\n// import {Link} from 'react-router-dom'\nimport './orders.css'\nimport OrderDetails from './orderDetails'\n\nclass Orders extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             orderData: [],\n        }\n    }\n    \n    componentDidMount(){\n        fetch(\"https://mystore-nodebackend.herokuapp.com/orders\") \n        .then(res => res.json())\n        .then(res => this.setState({orderData: res}))\n    }\n\n    handleClick(item){\n        return (\n            <OrderDetails item = {item} />\n        )\n    }\n\n\n    render() {\n        let data = []\n        this.state.orderData.map((orders,index) => {\n            return (\n                <div key={index}>\n                    {data.push(orders)}\n                </div>\n            ) \n        })\n        \n        return (\n            <div>\n                {/* Navbar */}\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                    <div className=\"container\">\n                        <a className=\"navbar-brand\" href=\"/\">Shopify App</a>\n                    </div>\n                </nav>\n                &nbsp; &nbsp; &nbsp;\n\n                {/* Orders */}\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            <div className=\"text-center\">\n                                <h3>Orders</h3> &nbsp; &nbsp;\n                                {console.log(data)}\n                            </div>\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>Order Number</th>\n                                        <th>Total</th>\n                                        <th>Product</th>\n                                        <th>Customer</th>\n                                        <th>Shipping Address</th>\n                                        <th>Date of Purchase</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {data.map((item,index) => {\n                                        return (\n                                            <tr key={index}>\n                                                <td>{index + 1}</td>\n                                                <td>{item.order_number}</td>\n                                                <td>{item.total_price}</td>\n                                                <td>{\n                                                        item.line_items.map((product,index) => {\n                                                            return (\n                                                                <li> { product.title } </li>\n                                                            )\n                                                        })\n                                                    }\n                                                </td>\n                                                <td>{item.customer.first_name} {item.customer.last_name}</td>\n                                                <td>{item.shipping_address.address1}{item.shipping_address.address2}</td>\n                                                <td>{item.created_at.split('T')[0]}</td>\n                                                <td>\n                                                    <a href={`${process.env.PUBLIC_URL}/orders/${item._id}`} \n                                                    className=\"btn-sm btn-primary\" onClick={() => this.handleClick(item)}>Edit</a>\n                                                </td>\n                                            </tr>\n                                        )\n                                    })}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Orders","import React, { Component } from 'react'\nimport './orderDetails.css'\n\nclass homepage extends Component {\n    render() {\n        return (\n            <div>\n                {/* Navbar */}\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                    <div className=\"container\">\n                        <a className=\"navbar-brand\" href=\"/\">Shopify App</a>\n                    </div>\n                </nav>\n                &nbsp; &nbsp; &nbsp;\n                <div className=\"container\">\n                    <div className=\"jumbotron\">\n                        <h2>Welcome to the store..!</h2>\n                        <p>A place which captures the orders when a purchase is made on the spotify store.</p>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-6\">\n                            <h4>To visit the store and choose among your favourite character tshirts to buy</h4>\n                            <a href=\"https://rohitkumar1105.myshopify.com/\" className=\"btn btn-sm btn-primary\">Click here</a>\n                        </div>\n\n                        <div className=\"col-sm-6\">\n                            <h4>View the order which you recently placed and edit any details if you like</h4>\n                            <a href={`${process.env.PUBLIC_URL}/orders/`} className=\"btn btn-sm btn-primary\">Orders</a>\n                        </div>\n                    </div>\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default homepage\n","import {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Orders from './components/orders'\n\nimport React, { Component } from 'react'\nimport homepage from './components/homepage';\nimport orderDetails from './components/orderDetails';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={'/'}>\n        <Switch>\n          <Route exact path='/' component={homepage} />\n          <Route exact path='/orders' component={Orders} />\n          <Route exact path='/orders/:order_id' component={orderDetails} />\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}